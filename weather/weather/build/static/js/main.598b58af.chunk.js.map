{"version":3,"sources":["Display.tsx","Buttons.tsx","App.tsx","serviceWorker.js","index.js"],"names":["Display","tempr","locat","desc","icon","Location","styled","h1","Temp","Description","Icon","src","BTN","button","Button","props","this","text","handleClick","style","onClick","type","React","Component","App","useState","weather","setWeather","temp","setTemp","location","setLocation","description","setDescription","search","setSearch","query","setQuery","actBtn","setBtn","useEffect","getWeather","a","fetch","response","json","data","main","toFixed","name","Body","section","Title","Header","SearchButton","SearchBar","input","Converter","Form","form","onSubmit","e","preventDefault","value","onChange","target","map","title","height","color","className","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.598b58af.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Display = ({\r\n  tempr,\r\n  locat,\r\n  desc,\r\n  icon,\r\n}: {\r\n  tempr: string;\r\n  locat: string;\r\n  desc: string;\r\n  icon: string;\r\n}) => {\r\n  const Location = styled.h1`\r\n    font-size: 60px;\r\n    color: rgb(255, 255, 255);\r\n    display: flex;\r\n    justify-content: center;\r\n    font-weight: 300;\r\n    padding-top: 0px;\r\n    margin-top: 0px;\r\n    margin-bottom: 0px;\r\n  `;\r\n  const Temp = styled.h1`\r\n    font-size: 60px;\r\n    color: white;\r\n    display: flex;\r\n    justify-content: center;\r\n    font-weight: 300;\r\n    padding-top: 0px;\r\n    margin-top: 0px;\r\n    margin-bottom: 0px;\r\n  `;\r\n\r\n  const Description = styled.h1`\r\n    font-size: 40px;\r\n    color: white;\r\n    display: flex;\r\n    justify-content: center;\r\n    font-weight: 300;\r\n    padding-top: 0px;\r\n    margin-top: 0px;\r\n    margin-bottom: 0px;\r\n  `;\r\n\r\n  const Icon = styled.h1`\r\n    display: flex;\r\n    justify-content: center;\r\n  `;\r\n\r\n  return (\r\n    <div>\r\n      <Location>{locat}</Location>\r\n      <div>\r\n        <Icon>\r\n          {icon === \"clear sky\" ? (\r\n            <img src=\"https://img.icons8.com/color/144/000000/sun.png\" />\r\n          ) : icon === \"thunderstorm\" ? (\r\n            <img src=\"https://img.icons8.com/color/96/000000/storm.png\" />\r\n          ) : icon === \"broken clouds\" ? (\r\n            <img src=\"https://img.icons8.com/color/96/000000/clouds.png\" />\r\n          ) : icon === \"heavy intensity rain\" ? (\r\n            <img src=\"https://img.icons8.com/color/96/000000/rain.png\" />\r\n          ) : icon === \"light intensity shower rain\" ? (\r\n            <img src=\"https://img.icons8.com/color/96/000000/rain.png\" />\r\n          ) : icon === \"few clouds\" ? (\r\n            <img src=\"https://img.icons8.com/color/96/000000/clouds.png\" />\r\n          ) : icon === \"scattered clouds\" ? (\r\n            <img src=\"https://img.icons8.com/color/96/000000/clouds.png\" />\r\n          ) : (\r\n            <img src=\"https://img.icons8.com/color/96/000000/corgi.png\" />\r\n          )}\r\n        </Icon>\r\n      </div>\r\n\r\n      <Temp>{tempr}</Temp>\r\n      <Description>{desc}</Description>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Display;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\ninterface IProps {\r\n  text: string;\r\n  handleClick: () => void;\r\n  style: React.CSSProperties;\r\n}\r\n\r\nconst BTN = styled.button`\r\n  padding-top: 0px;\r\n  background-color: transparent;\r\n  border: none;\r\n  font-size: 17px;\r\n  color: rgb(255, 255, 255);\r\n`;\r\n\r\nclass Button extends React.Component<IProps> {\r\n  props: { text: any; handleClick: any; style: any };\r\n  render() {\r\n    const { text, handleClick, style } = this.props;\r\n    return (\r\n      <div>\r\n        <BTN onClick={handleClick} style={style} type=\"button\">\r\n          {text}\r\n        </BTN>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Button;\r\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Display from \"./Display\";\nimport Button from \"./Buttons\";\nimport styled from \"styled-components\";\n\nconst App = () => {\n  const [weather, setWeather] = useState<string>(\"\");\n  const [temp, setTemp] = useState<number>(0);\n  const [location, setLocation] = useState<string>(\"\");\n  const [description, setDescription] = useState<string>(\"\");\n  const [search, setSearch] = useState<string>(\"\");\n  const [query, setQuery] = useState<string>(\"kyiv\");\n  const [actBtn, setBtn] = useState<string>(\"Celcium\");\n  const titles: string[] = [\"Celcium\", \"Kelvin\", \"Farenheit\"];\n\n  useEffect(() => {\n    getWeather();\n  }, [query]);\n\n  const getWeather = async () => {\n    const response = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=${query}&lang=en&units=metric&exclude=current&appid=64f51859a85fc1dfd98782a9e38e4859`\n    );\n    const data: { [key: string]: any } = await response.json();\n    setBtn(\"Celcium\");\n    setWeather(data.main.temp.toFixed(1));\n    setTemp(data.main.temp);\n    setLocation(data.name);\n    setDescription(data.weather[0].description);\n  };\n\n  const updateSearch = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  };\n\n  const getSearch = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    setQuery(search);\n  };\n\n  const Body = styled.section`\n    background: rgb(67, 188, 255);\n    background: linear-gradient(\n      184deg,\n      rgba(67, 188, 255, 1) 0%,\n      rgba(69, 79, 252, 0.9026961126247374) 100%\n    );\n    height: 1000px;\n  `;\n  const Title = styled.section`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: row;\n  `;\n  const Header = styled.h1`\n    font-size: 70px;\n    color: white;\n    display: flex;\n    justify-content: center;\n    font-weight: 300;\n    padding-top: 100px;\n    margin-top: 0px;\n    margin-bottom: 20px;\n  `;\n\n  const SearchButton = styled.button`\n    background-color: transparent;\n    color: white;\n    font-size: 20px;\n    font-weight: 100;\n    height: 35px;\n    width: 100px;\n    border-top-right-radius: 5px;\n    border-bottom-right-radius: 5px;\n    border: solid 1px white;\n\n    &:hover {\n      background-color: white;\n      color: rgba(252, 142, 69, 0.903);\n      transition: 0.4s;\n    }\n  `;\n  const SearchBar = styled.input`\n    height: 31px;\n    width: 250px;\n    border: solid 1px white;\n    border-top-left-radius: 5px;\n    border-bottom-left-radius: 5px;\n  `;\n\n  const Converter = styled.section`\n    display: flex;\n    justify-content: center;\n  `;\n\n  const Form = styled.form`\n    display: flex;\n    justify-content: center;\n    margin-top: 20px;\n    margin-bottom: 20px;\n  `;\n\n  const BTN = styled.button`\n  padding-top: 0px;\n  background-color: transparent;\n  border: none;\n  font-size: 17px;\n  color: rgb(255, 255, 255);\n`;\n\n  return (\n    <Body>\n      <Title>\n        <Header>Weather</Header>\n        <img src=\"https://img.icons8.com/color/96/000000/partly-cloudy-rain.png\" />\n      </Title>\n      <Form onSubmit={getSearch}>\n        <SearchBar type=\"text\" value={search} onChange={updateSearch} />\n        <SearchButton type=\"submit\" onClick={getWeather}>\n          Search\n        </SearchButton>\n      </Form>\n      <Converter>\n        {titles.map((title) => (\n          <Button\n            text={title}\n            handleClick={() => {\n              title == \"Farenheit\"\n                ? setWeather(((temp * 9) / 5 + 32).toFixed(1))\n                : title == \"Kelvin\"\n                ? setWeather((temp + 273.15).toFixed(1))\n                : setWeather(temp.toFixed(1));\n              title == \"Farenheit\"\n                ? setBtn(title)\n                : title == \"Kelvin\"\n                ? setBtn(title)\n                : setBtn(title);\n            }}\n            style={{\n              height: actBtn == title ? \"10px\" : \"15px\",\n              color: actBtn == title ? \"orange\" : \"white\",\n            }}\n          />\n        ))}\n      </Converter>\n      <div className=\"display\">\n        <Display\n          tempr={weather + \"°\"}\n          locat={location}\n          desc={description}\n          icon={description}\n        />\n      </div>\n    </Body>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}