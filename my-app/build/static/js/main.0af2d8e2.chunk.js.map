{"version":3,"sources":["components/Task.js","components/inputTask.js","App.js","serviceWorker.js","index.js"],"names":["Task","task","props","IsDonebtn","className","done","onClick","deleteTask","src","doneTask","EditBtn","editTask","edit","onBlur","saveTask","onChange","handleChange","type","value","input","title","TaskInput","addTask","state","setState","inputChange","event","target","this","React","Component","App","componentDidMount","tod","JSON","parse","localStorage","getItem","tasks","console","log","newTasks","push","id","length","saveData","index","findIndex","currentValue","splice","todos","setItem","stringify","class","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0af2d8e2.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\nconst Task = ({ task, ...props }) => {\r\n  const IsDonebtn = () => (\r\n    <div className=\"isdone-btn\">\r\n      {!task.done ? (\r\n        <p onClick={props.doneTask}>\r\n          <img src=\"https://img.icons8.com/material/24/000000/checkmark--v1.png\" />\r\n        </p>\r\n      ) : (\r\n        <p onClick={props.deleteTask}>\r\n          <img src=\"https://img.icons8.com/ios-filled/24/000000/delete-sign.png\" />\r\n        </p>\r\n      )}\r\n    </div>\r\n  );\r\n\r\n  const EditBtn = () => (\r\n    <div className=\"edit-btn\">\r\n      <p onClick={props.editTask}>\r\n        <img src=\"https://img.icons8.com/ios/20/000000/edit.png\" />\r\n      </p>\r\n    </div>\r\n  );\r\n\r\n  const className = \"task\" + (task.done ? \"task-done\" : \"\");\r\n  return (\r\n    <div className={className}>\r\n      {!task.edit ? <p>{task.title}</p> : <input\r\n        onBlur={props.saveTask}\r\n         onChange={props.handleChange}\r\n          type=\"text\"\r\n          value={props.input}\r\n          className=\"input\"\r\n        ></input>}\r\n      <div className=\"Btns\">\r\n        {task.edit?null:<EditBtn></EditBtn>}\r\n        <IsDonebtn></IsDonebtn>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Task;\r\n","import React from \"react\";\r\n\r\nclass TaskInput extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      input: \"\",\r\n    };\r\n  }\r\n\r\n  addTask = () => {\r\n    const { input } = this.state;\r\n    if (input) {\r\n      this.props.addTask(input);\r\n      this.setState({ input: \"\" });\r\n    }\r\n  };\r\n\r\n  inputChange = (event) => {\r\n    this.setState({ input: event.target.value });\r\n  };\r\n\r\n  render() {\r\n    const { input } = this.state;\r\n    return (\r\n      <div className=\"task-input\">\r\n        <input\r\n          className=\"inp\"\r\n          onChange={this.inputChange}\r\n          value={input}\r\n        ></input>\r\n        <button className=\"btn\" onClick={this.addTask}>\r\n          add\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TaskInput;\r\n","import React, { createElement } from \"react\";\nimport Task from \"./components/Task\";\nimport TaskInput from \"./components/inputTask\";\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      tasks: [\n        { id: 0, title: \"create todo-list\", done: false, edit: false },\n        {\n          id: 1,\n          title: \"read the book\",\n          done: true,\n          edit: false,\n          class: \"done\",\n        },\n        { id: 2, title: \"play tennis\", done: false, edit: false },\n        { id: 3, title: \"something else\", done: false, edit: false },\n      ],\n    };\n  }\n\n  componentDidMount = () => {\n    let tod = JSON.parse(localStorage.getItem(\"todos\"));\n    if (tod == null) {\n      this.setState({ tasks: this.state.tasks });\n    } else {\n      this.setState({ tasks: tod });\n    }\n    \n\n    \n    console.log(tod);\n  };\n\n  addTask = (task) => {\n    let newTasks = [...this.state.tasks];\n\n    newTasks.push({\n      id: this.state.tasks.length !== 0 ? this.state.tasks.length : 0,\n      done: false,\n      title: task,\n      edit: false,\n    });\n\n    this.setState({ tasks: newTasks }, this.saveData);\n  };\n\n  doneTask = (id) => {\n    let newTasks = [...this.state.tasks];\n    let index = newTasks.findIndex((currentValue) => currentValue.id == id);\n    newTasks[index].done = true;\n    this.setState({ tasks: newTasks }, this.saveData);\n  };\n\n  deleteTask = (id) => {\n    let newTasks = [...this.state.tasks];\n    let index = newTasks.findIndex((currentValue) => currentValue.id == id);\n    newTasks.splice(index, 1);\n    this.setState({ tasks: newTasks }, this.saveData);\n  };\n\n  editTask = (id) => {\n    let newTasks = [...this.state.tasks];\n    let index = newTasks.findIndex((currentValue) => currentValue.id == id);\n    const title = newTasks[index].title;\n    newTasks[index].edit = true;\n\n    this.setState({ input: title, tasks: newTasks }, this.saveData);\n  };\n\n  handleChange = (event) => {\n    this.setState({ input: event.target.value });\n  };\n\n  saveTask = (id) => {\n    let newTasks = [...this.state.tasks];\n    let index = newTasks.findIndex((currentValue) => currentValue.id == id);\n    newTasks[index].edit = false;\n    newTasks[index].title = this.state.input;\n    this.setState({ tasks: newTasks }, this.saveData);\n  };\n\n  saveData = () => {\n    let todos = this.state.tasks;\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\n  };\n\n  render() {\n    const { tasks } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1 className=\"top\">to-do list</h1>\n        {tasks.map((task) => (\n          <Task\n            componentDidMount={() => this.componentDidMount()}\n            doneTask={() => this.doneTask(task.id)}\n            deleteTask={() => this.deleteTask(task.id)}\n            editTask={() => this.editTask(task.id)}\n            saveTask={() => this.saveTask(task.id)}\n            handleChange={this.handleChange}\n            input={this.state.input}\n            saveData={() => this.saveData()}\n            task={task}\n            key={task.id}\n          ></Task>\n        ))}\n        <TaskInput addTask={this.addTask}></TaskInput>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}