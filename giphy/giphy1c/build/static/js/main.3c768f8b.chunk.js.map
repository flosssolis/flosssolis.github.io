{"version":3,"sources":["Buttons.js","App.js","serviceWorker.js","index.js"],"names":["Button","this","props","text","handleClick","style","className","onClick","type","React","Component","titles","App","componentDidMount","loadGifs","setState","actBtn","fetch","then","data","json","gifs","urls","reduce","arr","gifObj","url","images","fixed_width","console","log","state","map","title","backgroundColor","color","id","src","alt","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"+OAceA,G,6KAVH,IAAD,EAC8BC,KAAKC,MAAlCC,EADD,EACCA,KAAMC,EADP,EACOA,YAAaC,EADpB,EACoBA,MAC3B,OACE,4BAAQC,UAAU,MAAMC,QAASH,EAAaC,MAAOA,EAAOG,KAAK,UAC9DL,O,GALYM,IAAMC,YCCrBC,EAAS,CAAC,YAAa,OAAQ,OAAQ,QAsE9BC,E,kDApEb,WAAYV,GAAQ,IAAD,8BACjB,cAAMA,IAORW,kBAAoB,WAClB,EAAKC,SAAS,SATG,EAYnBA,SAAW,SAACX,GACV,EAAKY,SAAS,CAAEC,OAAQb,IACxBc,MAAM,0CAAD,OACuCd,EADvC,uDAGFe,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,SAACG,GACL,IAAMC,EAAOD,EAAKF,KAAKI,QAAO,SAACC,EAAKC,GAClC,IAAMC,EAAMD,EAAOE,OAAOC,YAAYF,IACtC,MAAM,GAAN,mBAAWF,GAAX,CAAgBE,MACf,IACH,EAAKX,SAAS,CAAEI,KAAMG,IACtBO,QAAQC,UAtBZ,EAAKC,MAAQ,CACXZ,KAAM,GACNH,OAAQ,QAJO,E,qDA4BT,IAAD,OACCG,EAASlB,KAAK8B,MAAdZ,KAER,OACE,yBAAKb,UAAU,OACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,cACb,wBAAIA,UAAU,UAAd,eACA,yBAAKA,UAAU,eACZK,EAAOqB,KAAI,SAACC,GAAD,OACV,kBAAC,EAAD,CACE9B,KAAM8B,EACN7B,YAAa,WACX,EAAKU,SAASmB,IAEhB5B,MAAO,CACL6B,gBACE,EAAKH,MAAMf,QAAUiB,EACjB,QACA,wBACNE,MACE,EAAKJ,MAAMf,QAAUiB,EACjB,wBACA,iBAOlB,yBAAKG,GAAG,aACLjB,EAAKa,KAAI,SAACN,GAAD,OACR,yBAAKW,IAAKX,EAAKY,IAAI,MAAMC,IAAKb,a,GA7DxBjB,IAAMC,WCOJ8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,a","file":"static/js/main.3c768f8b.chunk.js","sourcesContent":["import React from \"react\";\r\n//import style from './App.css';\r\n\r\nclass Button extends React.Component {\r\n  render() {\r\n    const { text, handleClick, style } = this.props;\r\n    return (\r\n      <button className=\"btn\" onClick={handleClick} style={style} type=\"button\">\r\n        {text}\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Button;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Button from \"./Buttons\";\n\nconst titles = [\"Reactions\", \"Cats\", \"Dogs\", \"Food\"];\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      actBtn: \"cats\",\n    };\n  }\n\n  componentDidMount = () => {\n    this.loadGifs(\"cats\");\n  };\n\n  loadGifs = (text) => {\n    this.setState({ actBtn: text });\n    fetch(\n      `https://api.giphy.com/v1/gifs/search?q=${text}&api_key=hPK1vu1HwbBeKgCzgHqclkWCMcjbZZjt&limit=49`\n    )\n      .then((data) => data.json())\n      .then((gifs) => {\n        const urls = gifs.data.reduce((arr, gifObj) => {\n          const url = gifObj.images.fixed_width.url;\n          return [...arr, url];\n        }, []);\n        this.setState({ data: urls });\n        console.log();\n      });\n  };\n\n  render() {\n    const { data } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"body\">\n          <div className=\"header-bar\">\n            <h1 className=\"header\">Giphy clone</h1>\n            <div className=\"header-btns\">\n              {titles.map((title) => (\n                <Button\n                  text={title}\n                  handleClick={() => {\n                    this.loadGifs(title);\n                  }}\n                  style={{\n                    backgroundColor:\n                      this.state.actBtn == title\n                        ? \"white\"\n                        : \"rgba(2, 8, 31, 0.925)\",\n                    color:\n                      this.state.actBtn == title\n                        ? \"rgba(2, 8, 31, 0.925)\"\n                        : \"white\",\n                  }}\n                />\n              ))}\n            </div>\n          </div>\n        </div>\n        <div id=\"container\">\n          {data.map((url) => (\n            <img src={url} alt=\"gif\" key={url} />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n// const App = () => {\n//   const APP_KEY = \"hPK1vu1HwbBeKgCzgHqclkWCMcjbZZjt\";\n\n//   useEffect(() => {\n//     getGifs();\n//   });\n\n//   const getGifs = async () => {\n//     const response = await fetch(\"\");\n//     const data = await response.json();\n//     console.log(data);\n//   };\n\n// удалить сщзн\n// менять state вместо 4 ф-ций\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}